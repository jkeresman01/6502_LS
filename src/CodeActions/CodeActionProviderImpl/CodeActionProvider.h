#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

#include <memory>

#include "../Diagnostics/IDiagnosticsProvider.h"
#include "../Types/CodeAction.h"
#include "ICodeActionsProvider.h"
#include "IDiagnosticsAnalyzer.h"

namespace ls6502
{

/////////////////////////////////////////////////////////////////////
///
/// @class CodeActionProvider
///
/// @brief Provides code actions based on document diagnostics
///
/////////////////////////////////////////////////////////////////////
class CodeActionProvider : public ICodeActionsProvider
{
  public:
    /////////////////////////////////////////////////////////////////////
    ///
    /// @brief Constructor for CodeActionProvider
    ///
    /////////////////////////////////////////////////////////////////////
    CodeActionProvider();

    /////////////////////////////////////////////////////////////////////
    ///
    /// @brief Retrieves available code actions for a given document
    ///
    /// @param [in] document
    /// @param [in] URI
    ///
    /// @return A vector of available code actions
    ///
    /////////////////////////////////////////////////////////////////////
    std::vector<CodeAction> getCodeActions(const std::string &document, const std::string &URI) override;

    /////////////////////////////////////////////////////////////////////
    ///
    /// @brief Mutator method for diagnostics provider
    ///
    /// @param [in] diagnosticsProvider
    ///
    /////////////////////////////////////////////////////////////////////
    void setDiagnosticsProvider(const std::shared_ptr<IDiagnosticsProvider> &diagnosticsProvider);

  private:
    /////////////////////////////////////////////////////////////////////
    ///
    /// @brief Provider for document diagnostics
    ///
    /////////////////////////////////////////////////////////////////////
    std::shared_ptr<IDiagnosticsProvider> m_diagnosticsProvider;

    /////////////////////////////////////////////////////////////////////
    ///
    /// @brief Diagnostics analyzer
    ///
    /////////////////////////////////////////////////////////////////////
    std::shared_ptr<IDiagnosticsAnalyzer> m_diagnosticsAnalyzer;

    /////////////////////////////////////////////////////////////////////
    ///
    /// @brief Code actions
    ///
    /////////////////////////////////////////////////////////////////////
    std::vector<CodeAction> m_codeActions;
};

} // namespace ls6502
