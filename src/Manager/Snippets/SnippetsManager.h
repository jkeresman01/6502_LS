#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

#include <memory>
#include <optional>
#include <unordered_map>
#include <vector>

#include "../../Repo/Snippets/FactoryImpl/SnippetRepositoryFactory.h"
#include "../../Repo/Snippets/ISnippetRepository.h"

namespace ls6502
{
//////////////////////////////////////////////////////////////
///
/// Typedefs
///
//////////////////////////////////////////////////////////////
typedef std::unordered_multimap<std::string, std::string> SnippetsMapT;

//////////////////////////////////////////////////////////////
///
/// @class SnippetsManager
///
/// @brief Manages the 6502 ASM snippets.
///        Provides access to all snippets and lookup functionality.
///
//////////////////////////////////////////////////////////////
class SnippetsManager
{
  public:
    //////////////////////////////////////////////////////////////
    ///
    /// @brief Constructor
    ///
    //////////////////////////////////////////////////////////////
    SnippetsManager() : m_snippetsRepository(SnippetRepositoryFactory::create()){};

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Deleted copy constructor
    ///
    //////////////////////////////////////////////////////////////
    SnippetsManager(const SnippetsManager &) = delete;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Deleted move constructor
    ///
    //////////////////////////////////////////////////////////////
    SnippetsManager(SnippetsManager &&) = delete;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Deleted copy assignment operator
    ///
    //////////////////////////////////////////////////////////////
    SnippetsManager &operator=(const SnippetsManager &) = delete;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Deleted move assignment operator
    ///
    //////////////////////////////////////////////////////////////
    SnippetsManager &operator=(SnippetsManager &&) = delete;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Returns the singleton instance of SnippetsManager
    ///
    /// @return Reference to the singleton instance
    ///
    //////////////////////////////////////////////////////////////
    static SnippetsManager &getInstance();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Retrieves all available snippets
    ///
    /// @return A map containing all snippets
    ///
    //////////////////////////////////////////////////////////////
    SnippetsMapT getAllSnippets();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Retrieves snippets matching a given mnemonic
    ///
    /// @param [in] mnemonic The mnemonic to search for
    ///
    /// @return A vector of matching snippets
    ///
    //////////////////////////////////////////////////////////////
    std::optional<std::vector<std::string>> getSnippetsByMnemonic(const std::string &mnemonic);

  private:
    //////////////////////////////////////////////////////////////
    ///
    /// @brief Loads all available snippets into memory
    ///
    //////////////////////////////////////////////////////////////
    void loadSnippets();

  private:
    //////////////////////////////////////////////////////////////
    ///
    /// @brief Shared repository for accessing snippet sets
    ///
    //////////////////////////////////////////////////////////////
    std::shared_ptr<ISnippetRepository> m_snippetsRepository;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Map storing all snippet mnemonics and corresponding snippet data
    ///
    //////////////////////////////////////////////////////////////
    SnippetsMapT m_snippets;
};
} // namespace ls6502
