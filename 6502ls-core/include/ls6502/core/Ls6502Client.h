#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

#include <memory>
#include <string>
#include <unordered_map>

#include "ls6502/lsp/capabilities/ClientCapabilities.h"
#include "ls6502/lsp/types/ClientInfo.h"

namespace ls6502::core
{

//////////////////////////////////////////////////////////////
///
/// typedefs
///
//////////////////////////////////////////////////////////////
typedef std::unordered_map<std::string, std::string> DocumentsMapT;

//////////////////////////////////////////////////////////////
///
/// @class Ls6502Client
///
/// @brief Represent the client that connects to Ls6502 server
///
//////////////////////////////////////////////////////////////
class Ls6502Client
{
public:
    //////////////////////////////////////////////////////////////
    ///
    /// @brief Default constructor
    ///
    //////////////////////////////////////////////////////////////
    Ls6502Client() = default;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Constructor that saves client info and registers
    ///        clients capabilities
    ///
    /// @param [in] clientInfo
    /// @param [in] clientCapabilites
    ///
    //////////////////////////////////////////////////////////////
    Ls6502Client(const ClientInfo& clientInfo, const std::shared_ptr<ClientCapabilities>& clientCapabilites);

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Registers client capabilities (features supported
    ///        by the editor or tool)
    ///
    /// @param [in] clientCapabilites
    ///
    //////////////////////////////////////////////////////////////
    void registerCapabilites(const std::shared_ptr<ClientCapabilities>& clientCapabilites);

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Saves info about the client (name and version)
    ///
    /// @param [in] clientInfo
    ///
    //////////////////////////////////////////////////////////////
    void saveInfo(const ClientInfo& clientInfo);

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Adds new document to keep track of
    ///
    /// @param [in] URI
    /// @param [in] document
    ///
    //////////////////////////////////////////////////////////////
    void addDocument(const std::string& URI, const std::string& document);

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Adds new document to keep track of
    ///
    /// @param [in] URI
    /// @param [in] document
    ///
    //////////////////////////////////////////////////////////////
    void updateDocumentWithURI(const std::string& URI, const std::string& document);

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Gets document by provided URI
    ///
    /// @param [in] URI
    ///
    //////////////////////////////////////////////////////////////
    std::string getDocumentByURI(const std::string& URI) const;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Gets string represenation of client information
    ///
    /// @return clientInfo
    ///
    //////////////////////////////////////////////////////////////
    std::string getInfo() const
    {
        return m_clientInfo.toString();
    };

private:
    //////////////////////////////////////////////////////////////
    ///
    /// @brief Client capabilites
    ///
    //////////////////////////////////////////////////////////////
    std::shared_ptr<ClientCapabilities> m_clientCapabilities = std::make_shared<ClientCapabilities>();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Client information (name and version)
    ///
    //////////////////////////////////////////////////////////////
    ClientInfo m_clientInfo;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Documents mapped by their corresponding URI
    ///
    //////////////////////////////////////////////////////////////
    DocumentsMapT m_documentsByURI;
};
} // namespace ls6502
