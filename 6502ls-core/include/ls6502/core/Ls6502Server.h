#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

#include <memory>
#include <nlohmann/json.hpp>
#include <string>

#include "ls6502/lsp/messages/response/ResponseMessage.h"
#include "ls6502/core/Ls6502Facade.h"

namespace ls6502::core
{

//////////////////////////////////////////////////////////////
///
/// @class Ls6502Server
///
/// @brief Ls6502 entry class, responsible for starting the server
///
//////////////////////////////////////////////////////////////
class Ls6502Server
{
public:
    //////////////////////////////////////////////////////////////
    ///
    /// @brief Constructs (creates instance) of the Ls6502Server
    ///
    //////////////////////////////////////////////////////////////
    Ls6502Server() = default;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Tilda Swilton (destructs Ls6502 server)
    ///
    //////////////////////////////////////////////////////////////
    virtual ~Ls6502Server() = default;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Starts the Ls6502 server
    ///
    //////////////////////////////////////////////////////////////
    void run();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Initializes the Ls6502 server
    ///
    //////////////////////////////////////////////////////////////
    void init();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Shutdown of the Ls6502 server
    ///
    //////////////////////////////////////////////////////////////
    void shutdown();

private:
    //////////////////////////////////////////////////////////////
    ///
    /// @brief Distributes requests to Ls6502 facade
    ///
    //////////////////////////////////////////////////////////////
    void handleRequest(const std::string& request);

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Initliazes configuration manager
    ///
    //////////////////////////////////////////////////////////////
    void initConfigurationManager();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Registers all providers
    ///
    //////////////////////////////////////////////////////////////
    void registerProviders();


private:
    //////////////////////////////////////////////////////////////
    ///
    /// @brief Single simplified interface for handling LSP request
    ///
    //////////////////////////////////////////////////////////////
    std::unique_ptr<Ls6502Facade> m_6502Facade = std::make_unique<Ls6502Facade>();
};

} // namespace ls6502
